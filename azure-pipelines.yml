# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: "ubuntu-latest"

stages:
- stage: Build
  displayName: Build and Push stage
  jobs:
   - job: Build
     displayName: Build
     steps:
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          containerRegistry: 'azure-acr-svc-con'
          repository: 'react-app'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
      - task: TerraformInstaller@0
        inputs:
         terraformVersion: 'latest'
   - job: TerraformInit
     displayName: Terraform Initalize
     continueOnError: false
     steps:
       - task: TerraformCLI@0
         inputs:
           command: 'init'
           workingDirectory: '$(System.DefaultWorkingDirectory)/aks-cluster'
           backendType: 'azurerm'
           backendServiceArm: 'azure=stg-svc-con'
           backendAzureRmResourceGroupName: 'terraform-storage-rg'
           backendAzureRmStorageAccountName: 'terraformstgacct'
           backendAzureRmContainerName: 'tfstatefiles'
           backendAzureRmKey: 'terraform-custom-vnet.tfstate'
           allowTelemetryCollection: false
   - job: TerraformValidate
     displayName: Terraform Validate
     continueOnError: false
     steps:
      - task: TerraformCLI@0
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/aks-cluster'
          allowTelemetryCollection: false

- stage: Deployment
  displayName: Deploy
  jobs:
  - deployment: AksCluster
    displayName: Aks ClusteR
    continueOnError: false
    environment: 'dev'
    pool: 
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
       deploy:
         steps:
           - task: TerraformInstaller@0
             inputs:
               terraformVersion: 'latest'
           - task: TerraformCLI@0
             inputs:
               command: 'plan'
               workingDirectory: '$(System.DefaultWorkingDirectory)/aks-cluster'
               commandOptions: '-out $(System.DefaultWorkingDirectory)/aks-cluster/$(DEV_ENVIRONMENT)-$(Build.BuildId)'''
               allowTelemetryCollection: false
           - task: TerraformCLI@0
             inputs:
               command: 'apply'
               workingDirectory: '$(System.DefaultWorkingDirectory)/aks-cluster'
               commandOptions: '$(System.DefaultWorkingDirectory)/aks-cluster/$(DEV_ENVIRONMENT)-$(Build.BuildId)'
               allowTelemetryCollection: false
